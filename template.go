package main

import (
	"text/template"
	"time"
)

type exportData struct {
	PackageName    string
	FunctionName   string
	DebugData      string
	CompressedData string
	ParseDate      time.Time
	Compression    int
	PctSavings     float64
}

var exportTemplate = template.Must(template.New("full").Parse(`// Code generated by go-binary (github.com/jimmysawczuk/go-binary); DO NOT EDIT.
// Generated {{ .ParseDate.Format "2006-01-02T15:04:05-0700" }}; compression = {{ .Compression }}, {{ printf "%0.1f%% saved" .PctSavings }}
package {{ .PackageName }}

import(
	"compress/gzip"
	"bytes"
	"io"
)

func {{ .FunctionName }}() ([]byte, error) {
{{ .DebugData }}

	in := bytes.NewBuffer([]byte{{ .CompressedData }})
	out := bytes.NewBuffer([]byte{})

	gz, err := gzip.NewReader(in)
	if err != nil {
		return []byte{}, err
	}
	io.Copy(out, gz)

	return out.Bytes(), nil
}
`))
